name: dev-e2e-no-compose

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  e2e-dev:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: rootpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok'"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=30

    env:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://root:rootpass@localhost:27017/ci_db?authSource=admin
      JWT_ACCESS_SECRET: test-access-secret
      JWT_REFRESH_SECRET: test-refresh-secret
      ACCESS_TOKEN_TTL: 20s

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install jq and api deps
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          cd api && npm ci

      - name: Start API + test + teardown (single step)
        run: |
          set -euo pipefail
          cd api
          # run in foreground in a subshell so we can tail logs if it dies
          ( node --trace-uncaught index.js ) > ../api.out 2>&1 &
          API_PID=$!
          cd ..

          # Wait for :5000 to accept TCP
          for i in {1..180}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/ | grep -q '^[0-9][0-9][0-9]$'; then
              break
            fi
            # show if node died
            if ! ps -p $API_PID >/dev/null 2>&1; then
              echo "API process exited before binding; logs:"
              sed -n '1,400p' api.out || true
              exit 1
            fi
            sleep 2
          done

          # fail if still not listening
          if ! curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/ | grep -q '^[0-9][0-9][0-9]$'; then
            echo "API didn't open port 5000 in time; logs:"
            sed -n '1,400p' api.out || true
            exit 1
          fi

          # Register (idempotent)
          curl -i -sS -X POST http://localhost:5000/api/register \
            -H "Content-Type: application/json" \
            -d '{"username":"ciuser","password":"cipass","isAdmin":false}' || true

          # Login (assert tokens)
          R=$(curl -sS -X POST http://localhost:5000/api/login \
            -H "Content-Type: application/json" \
            -d '{"username":"ciuser","password":"cipass"}')
          echo "$R" | jq -e '.accessToken,.refreshToken' >/dev/null
          AT=$(echo "$R" | jq -r '.accessToken')
          RT=$(echo "$R" | jq -r '.refreshToken')

          # Refresh -> new tokens
          R=$(curl -sS -X POST http://localhost:5000/api/refresh \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}")
          echo "$R" | jq -e '.accessToken,.refreshToken' >/dev/null
          NAT=$(echo "$R" | jq -r '.accessToken')
          NRT=$(echo "$R" | jq -r '.refreshToken')
          test "$NAT" != "$AT"
          test "$NRT" != "$RT"

          # Logout invalidates old refresh
          curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:5000/api/logout \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}" | grep -q "^200$"
          curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:5000/api/refresh \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}" | grep -q "^403$"

          # Teardown
          kill $API_PID 2>/dev/null || true

      - name: Print API log on failure
        if: failure()
        run: sed -n '1,400p' api.out || true
