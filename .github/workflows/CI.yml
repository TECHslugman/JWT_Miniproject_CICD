name: dev-e2e-no-compose

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  e2e-dev:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: rootpass
        ports:
          - 27017:27017
        # Health for reliability; doesn't add app healthchecks
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok'"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=30

    env:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://root:rootpass@localhost:27017/ci_db?authSource=admin
      JWT_ACCESS_SECRET: test-access-secret
      JWT_REFRESH_SECRET: test-refresh-secret
      ACCESS_TOKEN_TTL: 20s

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install jq and api deps
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          cd api
          npm ci

      - name: Start API (background)
        run: |
          cd api
          # run plain node to avoid nodemon in CI
          nohup node index.js > ../api.out 2>&1 &
          echo $! > ../api.pid

      - name: Wait for :5000 (no healthcheck)
        run: |
          for i in {1..120}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/)
            if [ "$code" != "000" ]; then exit 0; fi
            sleep 2
          done
          echo "Timed out waiting for API on :5000"; exit 1

      - name: Register (idempotent)
        run: |
          curl -i -sS -X POST http://localhost:5000/api/register \
            -H "Content-Type: application/json" \
            -d '{"username":"ciuser","password":"cipass","isAdmin":false}' || true

      - name: Login (assert tokens)
        run: |
          R=$(curl -sS -X POST http://localhost:5000/api/login \
            -H "Content-Type: application/json" \
            -d '{"username":"ciuser","password":"cipass"}')
          echo "$R" | jq -e '.accessToken,.refreshToken' >/dev/null
          AT=$(echo "$R" | jq -r '.accessToken')
          RT=$(echo "$R" | jq -r '.refreshToken')
          echo "AT=$AT" >> $GITHUB_ENV
          echo "RT=$RT" >> $GITHUB_ENV

      - name: Refresh -> new tokens
        run: |
          R=$(curl -sS -X POST http://localhost:5000/api/refresh \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}")
          echo "$R" | jq -e '.accessToken,.refreshToken' >/dev/null
          NAT=$(echo "$R" | jq -r '.accessToken')
          NRT=$(echo "$R" | jq -r '.refreshToken')
          test "$NAT" != "$AT"
          test "$NRT" != "$RT"

      - name: Logout invalidates old refresh
        run: |
          curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:5000/api/logout \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}" | grep -q "^200$"
          curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:5000/api/refresh \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}" | grep -q "^403$"

      - name: Print API log on failure
        if: failure()
        run: |
          sed -n '1,300p' api.out || true

      - name: Teardown API
        if: always()
        run: |
          kill $(cat api.pid) 2>/dev/null || true
