name: Test Case for dev environment

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  e2e-dev:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: root
          MONGO_INITDB_ROOT_PASSWORD: rootpass
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --quiet --eval 'db.runCommand({ ping: 1 }).ok'"
          --health-interval=5s
          --health-timeout=3s
          --health-retries=30

    env:
      NODE_ENV: development
      PORT: 5000
      MONGODB_URI: mongodb://root:rootpass@localhost:27017/ci_db?authSource=admin
      JWT_ACCESS_SECRET: test-access-secret
      JWT_REFRESH_SECRET: test-refresh-secret
      ACCESS_TOKEN_TTL: 20s

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install jq and API deps
        run: |
          set -euo pipefail
          sudo apt-get update
          sudo apt-get install -y jq
          cd api
          npm ci
          echo "## Auth E2E Results" >> "$GITHUB_STEP_SUMMARY"

      - name: Start API (background)
        run: |
          set -euo pipefail
          cd api
          ( node --trace-uncaught index.js ) > ../api.out 2>&1 & echo $! > ../api.pid
          cd ..
          echo "API_PID=$(cat api.pid)" >> "$GITHUB_ENV"

      - name: Wait for API :5000
        run: |
          set -euo pipefail
          for i in {1..180}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/ | grep -q '^[0-9][0-9][0-9]$'; then
              echo "- ✅ API listening on :5000" >> "$GITHUB_STEP_SUMMARY"
              exit 0
            fi
            if ! ps -p "$API_PID" >/dev/null 2>&1; then
              echo "API exited before binding; recent logs:"; sed -n '1,200p' api.out || true
              echo "- ❌ API failed to start" >> "$GITHUB_STEP_SUMMARY"
              exit 1
            fi
            sleep 2
          done
          echo "Timed out waiting for API"; sed -n '1,200p' api.out || true
          echo "- ❌ API timed out" >> "$GITHUB_STEP_SUMMARY"
          exit 1

      - name: Register
        run: |
          set -euo pipefail
          curl -i -sS -X POST http://localhost:5000/api/register \
            -H "Content-Type: application/json" \
            -d '{"username":"ciuser","password":"cipass","isAdmin":false}' || true
          echo "- ✅ Register (idempotent)" >> "$GITHUB_STEP_SUMMARY"

      - name: Login
        run: |
          set -euo pipefail
          R=$(curl -sS -X POST http://localhost:5000/api/login \
            -H "Content-Type: application/json" \
            -d '{"username":"ciuser","password":"cipass"}')
          echo "$R" | jq -e '.accessToken,.refreshToken' >/dev/null
          AT=$(echo "$R" | jq -r '.accessToken')
          RT=$(echo "$R" | jq -r '.refreshToken')
          echo "::add-mask::$AT"
          echo "::add-mask::$RT"
          echo "AT=$AT" >> "$GITHUB_ENV"
          echo "RT=$RT" >> "$GITHUB_ENV"
          echo "- ✅ Login (tokens issued)" >> "$GITHUB_STEP_SUMMARY"

      - name: Refresh
        run: |
          set -euo pipefail
          R=$(curl -sS -X POST http://localhost:5000/api/refresh \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}")
          echo "$R" | jq -e '.accessToken,.refreshToken' >/dev/null
          NAT=$(echo "$R" | jq -r '.accessToken')
          NRT=$(echo "$R" | jq -r '.refreshToken')
          test "$NAT" != "$AT"
          test "$NRT" != "$RT"
          echo "::add-mask::$NAT"
          echo "::add-mask::$NRT"
          echo "AT=$NAT" >> "$GITHUB_ENV"
          echo "RT=$NRT" >> "$GITHUB_ENV"
          echo "- ✅ Refresh (rotated tokens)" >> "$GITHUB_STEP_SUMMARY"

      - name: Logout + verify invalidation
        run: |
          set -euo pipefail
          curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:5000/api/logout \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}" | grep -q "^200$"
          curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:5000/api/refresh \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}" | grep -q "^403$"
          echo "- ✅ Logout invalidated prior refresh" >> "$GITHUB_STEP_SUMMARY"

      - name: Teardown API
        if: always()
        run: |
          set -euo pipefail
          kill "$API_PID" 2>/dev/null || true

      - name: Print API log on failure
        if: failure()
        run: sed -n '1,400p' api.out || true
