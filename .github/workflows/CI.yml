name: dev-e2e

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  e2e-dev:
    runs-on: ubuntu-latest
    env:
      JWT_ACCESS_SECRET: test-access-secret
      JWT_REFRESH_SECRET: test-refresh-secret
      ACCESS_TOKEN_TTL: 20s
      # Force CI Mongo URI to override any env_file values
      MONGODB_URI: mongodb://root:rootpass@mongo:27017/ci_db?authSource=admin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install jq
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Write CI env (fallbacks; shell env overrides these)
        run: |
          cat > .env << 'EOF'
          NODE_ENV=development
          PORT=5000
          # MONGODB_URI provided by job env to ensure override in CI
          JWT_ACCESS_SECRET=${{ env.JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET=${{ env.JWT_REFRESH_SECRET }}
          ACCESS_TOKEN_TTL=${{ env.ACCESS_TOKEN_TTL }}
          EOF

      - name: Start dev stack (mongo + api-dev)
        run: |
          export COMPOSE_PROFILES="dev,ci"
          docker compose up -d --build mongo api-dev

      - name: Show rendered compose (debug)
        run: docker compose config | sed -n '1,200p'

      - name: Wait for API :5000 (no healthcheck)
        run: |
          for i in {1..90}; do
            code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:5000/)
            if [ "$code" != "000" ]; then exit 0; fi
            sleep 2
          done
          echo "Timed out waiting for api-dev"; exit 1

      - name: Register (idempotent)
        run: |
          curl -i -sS -X POST http://localhost:5000/api/register \
            -H "Content-Type: application/json" \
            -d '{"username":"ciuser","password":"cipass","isAdmin":false}' || true

      - name: Login (assert tokens)
        run: |
          R=$(curl -sS -X POST http://localhost:5000/api/login \
            -H "Content-Type: application/json" \
            -d '{"username":"ciuser","password":"cipass"}')
          echo "$R" | jq -e '.accessToken,.refreshToken' >/dev/null
          AT=$(echo "$R" | jq -r '.accessToken')
          RT=$(echo "$R" | jq -r '.refreshToken')
          echo "AT=$AT" >> $GITHUB_ENV
          echo "RT=$RT" >> $GITHUB_ENV

      - name: Refresh -> new tokens
        run: |
          R=$(curl -sS -X POST http://localhost:5000/api/refresh \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}")
          echo "$R" | jq -e '.accessToken,.refreshToken' >/dev/null
          NAT=$(echo "$R" | jq -r '.accessToken')
          NRT=$(echo "$R" | jq -r '.refreshToken')
          test "$NAT" != "$AT"
          test "$NRT" != "$RT"

      - name: Logout invalidates old refresh
        run: |
          curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:5000/api/logout \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}" | grep -q "^200$"
          curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:5000/api/refresh \
            -H "Content-Type: application/json" \
            -d "{\"token\":\"${RT}\"}" | grep -q "^403$"

      - name: Show logs on failure
        if: failure()
        run: |
          docker compose logs --no-color api-dev || true
          docker compose logs --no-color mongo || true

      - name: Teardown
        if: always()
        run: |
          export COMPOSE_PROFILES="dev,ci"
          docker compose down -v
